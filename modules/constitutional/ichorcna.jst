{% from 'utilities/remove_files.jst' import remove_files with context %}
{% from 'modules/qc/stats2lims.jst' import stats2lims with context %}

{% macro ichorcna(sample, aligner='bwa', taskPrefix='Genome') %}
{% set bam %}{{ sample.gltype}}/alignment/{{ aligner }}/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.bam{% endset %}
{% set results_dir %}{{ sample.gltype }}/copy_number_analysis/ichorCNA/{{ sample.name }}{% endset %}
{% set wig %}{{ results_dir }}/{{ sample.name }}.{{ aligner }}.wig{% endset %}
{% set ichor_json %}{{ results_dir }}/{{ sample.name}}.{{ aligner }}.ichorCNA.json{% endset %}
{% set temp_dir %}temp/{{ sample.gltype }}/copy_number_analysis/ichorCNA/{{ sample.name }}/{{ sample.name }}.{{ aligner }}.ichor_rundir{% endset %}

{% set control = {} %}
{% if controlDataFiles is defined %}
  {% if controlDataFiles|selectattr('assayCode', 'eq', sample.assayCode)|first is defined %}
    {% do control.update(controlDataFiles|selectattr('assayCode', 'eq', sample.assayCode)|first) %}
  {% endif %}
{% endif %}

- name: hmmcopy_make_wig_{{ aligner }}_{{ sample.name }}
  tags: [{{ sample.gltype}}, constitutional, cna_caller, ichor, {{ sample.name }}]
  input: {{ bam }}
  output: {{ wig }}
  walltime: "24:00:00"
  cpus: 1
  mem: 2G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.hmmcopy_utils.module }}

    mkdir -p "{{ results_dir }}/"

    readCounter \
      --window 100000 \
      --quality 20 \
      --chromosome "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,\
    22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,X" \
      "{{ bam }}" \
      > "{{ wig }}"


- name: ichor_cna_{{ aligner }}_{{ sample.name }}
  tags: [{{ sample.gltype}}, constitutional, cna_caller, ichor, {{ sample.name }}]
  {% if control.ichorPon is defined %}
  reset: prepare_tumor_only_{{ study }}_{{ control.assayCode }}
  {% endif %}
  input:
    - {{ wig }}
    {% if control.ichorPon is defined %}
    - temp/tumor_only/control_data_files/{{ control.assayCode }}/{{ control.ichorPon | basename }}
    {% endif %}
  output:
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.cna.seg
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.seg
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.correctedDepth.txt
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.params.txt
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.RData
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.seg.txt
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_bias.pdf
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_correct.pdf
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_CNA_all_chrs.pdf
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_genomeWide_all_sols.pdf
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_genomeWide.pdf
    - {{ results_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA_tpdf.pdf
    - {{ ichor_json }}
  walltime: "24:00:00"
  cpus: 1
  mem: 2G
  cmd: |
    set -eu
    set -o pipefail

    module load {{ constants.tools.ichorcna.module }}

    {# Purge any existing results files prior to starting #}
    rm -r "{{ temp_dir }}" || true
    mkdir -p "{{ temp_dir }}"

    {#
    # ichorCNA includes some pre-built references in the source code, this command
    # finds these files dynamically with R system.find before starting
    #}
    EXTDATA=$(Rscript <(echo "cat(system.file('extdata/', package='ichorCNA'))"))

    {#
    # The ichorCNA launcher script does not currently get installed with
    # the rest of the package, so this path is hard coded in constants.yaml
    #}
    Rscript ${JS_PIPELINE_PATH}/{{ constants.tools.ichorcna.launcher }} \
      --id "{{ sample.name}}.{{ aligner }}.ichorCNA" \
      --WIG "{{ wig }}" \
      --outDir "{{ temp_dir }}" \
      --includeHOMD False \
      --estimateNormal True \
      --estimatePloidy True \
      --estimateScPrevalence True \
      --txnE 0.9999 \
      --txnStrength 10000 \
      --genomeStyle "UCSC" \
      --genomeBuild "canFam3" \
      --genomeSpecies "Cfamiliaris" \
      --chrs "c(1:38, 'X')" \
      --chrTrain "c(1:38)" \
      --chrNormalize "c(1:38)" \
      --scStates "c(1,3)" \
      --ploidy "c(2,3)" \
      --normal "c(0.25,0.5,0.6,0.7,0.8,0.9)" \
      {% if control.ichorPon is defined %}
      --normalPanel temp/tumor_only/control_data_files/{{ control.assayCode }}/{{ control.ichorPon | basename }} \
      {% endif %}
      --maxCN 7 \
      --normalizeMaleX FALSE \
      --gcWig {{ constants.coyote.ichor_gc }}

    {# Merging pdfs #}
    pdfunite \
      {% for contig in constants.coyote.calling_contigs %}
      {# Stopping at chrX #}
      {% if loop.index < 40 %}
      {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_CNA_chrchr{{ contig.contig }}.pdf \
      {% endif %}
      {% endfor %}
      {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_CNA_all_chrs.pdf

    {# Creating json for stats2lims #}
    tumor_frac=$(grep "Tumor Fraction:" {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.params.txt | awk '{ print $3 }')
    ploidy=$(grep "Ploidy:" {{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.params.txt | awk '{ print $2 }')

    cat <<EOF > {{ ichor_json }}
    {"SAMPLES": [{"LIBRARIES": [{"READGROUPS": [{}], "tumorFraction": "${tumor_frac}", "ploidy": "${ploidy}", "LB": "{{ sample.rglb }}" }], "SM": "{{ sample.name }}"}]}
    EOF
    {#
    # Move the output files to the final location
    #}
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.cna.seg" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.seg" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.correctedDepth.txt" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.params.txt" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.RData" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA.seg.txt" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_bias.pdf" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_correct.pdf" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_CNA_all_chrs.pdf" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_genomeWide_all_sols.pdf" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_genomeWide.pdf" "{{ results_dir }}/"
    mv "{{ temp_dir }}/{{ sample.name }}.{{ aligner }}.ichorCNA/{{ sample.name }}.{{ aligner }}.ichorCNA_tpdf.pdf" "{{ results_dir }}/"

    {# Remove the remaining files #}
    {% set task %}ichor_cna_{{ aligner }}_{{ sample.name }}{% endset %}
    {% set directory %}{{ temp_dir }}{% endset %}
    {{- remove_files(directory,none,task) }}
    {{- stats2lims(sample.gltype, sample.name, task, ichor_json, "ichor_cna") }}

{% endmacro %}
